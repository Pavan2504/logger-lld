@startuml
'https://plantuml.com/class-diagram

package com.application <<Rectangle>>{
}

package loggerlib <<Rectangle>>{
  com.application.service --right--|> ILogger
  ILogger --right--|> Logger

  interface ILogger {
    + void info(String message);
    + void error(String message);
    + void warn(String message);
  }

  class Logger {
    - LoggerMessageContext loggerMessageContext;
    + void error(String message);
    + void info(String message);
    + void warn(String message) ;
  }

  package com.logger.context{
      Logger -right--* LoggerMessageContext

      class LoggerMessageContext {
          - LogMessageHandlerFactory messageHandlerFactory;
          + void logMessage(LoggerMessage message);
      }
  }


package com.logger.handler {

   LogMessageHandler -down-|> ErrorLogMessageHandler
   LogMessageHandler -down-|> InfoLogMessageHandler
   LogMessageHandler -down-|> WarnLogMessageHandler
   LoggerMessageContext --right--> LogMessageHandler

   interface LogMessageHandler{
     + void handle(LoggerMessage message);
     + LoggerLevel getLevel();
   }


   class ErrorLogMessageHandler{
     - LoggerMessagePublisher publisher;
     + void printLogMessage(LoggerMessage message);
     + PrinterType getPrinterType();
   }

   class InfoLogMessageHandler{
     - LoggerMessagePublisher publisher;
     + void printLogMessage(LoggerMessage message);
     + PrinterType getPrinterType();
   }
class WarnLogMessageHandler{
    - LoggerMessagePublisher publisher;
    + void printLogMessage(LoggerMessage message);
    + PrinterType getPrinterType();
}
}

package com.logger.publisher{
  interface Publisher<A, B, C> {
      + void subscribe(A loggerLevel, B subscriber);
      + void publish(C loggerMessage);
  }

  class LoggerMessagePublisher{
    - Map<LoggerLevel, List<Subscriber>> subscribers;
    + void subscribe(LoggerLevel level, Subscriber printer);
    + void publish(LoggerMessage message);
  }

  InfoLogMessageHandler --down--* Publisher
  WarnLogMessageHandler --down--* Publisher
  ErrorLogMessageHandler --down--* Publisher
  Publisher --right-|> LoggerMessagePublisher
}

package com.logger.subscriber{
  interface Subscriber<T> {
      + void subscribe(T message);
  }

  class LoggerMessageSubscriber {
     - LogMessagePrinter logMessagePrinter;
     + LoggerMessageSubscriber(LogMessagePrinter logMessagePrinter) ;
     + void subscribe(LoggerMessage message);
  }

  LoggerMessagePublisher --down--* Subscriber
  Subscriber --right-|> LoggerMessageSubscriber
}

package com.logger.printer{
  interface LogMessagePrinter{
    + void printLogMessage(LoggerMessage message);
    + PrinterType getPrinterType();
  }

  class ConsoleLogMessagePrinter{
    + void printLogMessage(LoggerMessage message);
    + PrinterType getPrinterType();
  }

  class DBLogMessagePrinter{
    + void printLogMessage(LoggerMessage message);
    + PrinterType getPrinterType();
  }

  class FileLogMessagePrinter{
    + void printLogMessage(LoggerMessage message);
    + PrinterType getPrinterType();
  }

  LoggerMessageSubscriber --down--* LogMessagePrinter
  LogMessagePrinter -left-|> FileLogMessagePrinter
  LogMessagePrinter -down--|> DBLogMessagePrinter
  LogMessagePrinter -right--|> ConsoleLogMessagePrinter
}


package com.logger.factory {
  interface Factory
  class LogMessageHandlerFactory
  class LogMessagePrinterFactory

  Factory -right--|> LogMessageHandlerFactory
  Factory -down--|> LogMessagePrinterFactory
  LoggerMessageContext --down--* Factory : get LogMessageHandlerFactory

}

interface Factory<U, V> {
    U get(V type);
}
class LogMessageHandlerFactory{
    - Map<LoggerLevel, LogMessageHandler> handlerMapper;
    + LogMessageHandlerFactory(final List<LogMessageHandler> printers);
    + LogMessageHandler get(LoggerLevel level) ;
}

 class LogMessagePrinterFactory{
    - Map<PrinterType, LogMessagePrinter> printersMapper;
    + LogMessagePrinterFactory(final List<LogMessagePrinter> printers);
    + LogMessagePrinter get(PrinterType printerType);
}

package com.logger.manager{
  LoggerManager --left--* Publisher
class LoggerManager{
    - LoggerConfiger loggerConfiger;
    - LoggerMessagePublisher publisher;
    + void manage();
}
}
package com.logger.configuration{
  LoggerManager -up--* LoggerConfiger
  LoggerConfiger --up--* Factory : get LogMessagePrinterFactory
 class LoggerConfiger {
     - Map<LoggerLevel, List<LogMessagePrinter>> mapper;
     - LoggerLevel level;

     + void mapLevelToSink(LoggerLevel level, LogMessagePrinter logMessagePrinter);
     + void setLevel(LoggerLevel level) ;
     + LoggerLevel getLevel() ;
     + Map<LoggerLevel, List<LogMessagePrinter>> getMapper();
 }
}

'package com.logger.enums{
'enum LoggerLevel {
'    INFO,
'    ERROR,
'    WARN;
'}
'enum PrinterType {
'    DB,
'     FILE,
'     CONSOLE;
'}
'}
}

@enduml